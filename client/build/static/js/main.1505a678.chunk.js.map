{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","response","post","responseToPost","handleSubmit","_callee","e","body","regenerator_default","a","wrap","_context","prev","next","preventDefault","fetch","_this","method","headers","Content-Type","sent","json","setState","relatedBooks","stop","this","_this2","callApi","then","res","status","catch","err","console","log","Error","message","_this3","react_default","createElement","className","onSubmit","type","value","onChange","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAyDeA,oNArDbC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,eAAgB,MAalBC,mDAAe,SAAAC,EAAMC,GAAN,IAAAL,EAAAM,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbP,EAAEQ,iBADWH,EAAAE,KAAA,EAEUE,MAAM,eAAiBC,EAAKhB,MAAME,KAAM,CAC7De,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBALP,cAEPlB,EAFOU,EAAAS,KAAAT,EAAAE,KAAA,EAQMZ,EAASoB,OARf,OAQPd,EAROI,EAAAS,KASbJ,EAAKM,SAAS,CAAEnB,eAAgBI,EAAKgB,eATxB,wBAAAZ,EAAAa,SAAAnB,EAAAoB,kJAXM,IAAAC,EAAAD,KACnBA,KAAKE,UACFC,KAAK,SAAAC,GAAG,OAAIH,EAAKJ,SAAS,CAAErB,SAAU4B,EAAIC,WAC1CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,uKAGLjB,MAAM,4BAAvBd,kBACaA,EAASoB,iBAAtBd,SACkB,MAApBN,EAAS6B,6BAAsBK,MAAM5B,EAAK6B,yCACvC7B,sIAcC,IAAA8B,EAAAZ,KACR,OACEa,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,OACbF,EAAA7B,EAAA8B,cAAA,qDAA6Cd,KAAKzB,MAAMC,UACxDqC,EAAA7B,EAAA8B,cAAA,QAAME,SAAUhB,KAAKrB,cACnBkC,EAAA7B,EAAA8B,cAAA,SACED,EAAA7B,EAAA8B,cAAA,kCAEFD,EAAA7B,EAAA8B,cAAA,SACEG,KAAK,OACLC,MAAOlB,KAAKzB,MAAME,KAClB0C,SAAU,SAAAtC,GAAC,OAAI+B,EAAKf,SAAS,CAAEpB,KAAMI,EAAEuC,OAAOF,WAEhDL,EAAA7B,EAAA8B,cAAA,UAAQG,KAAK,UAAb,WAEFJ,EAAA7B,EAAA8B,cAAA,SAAId,KAAKzB,MAAMG,eAAe,IAC9BmC,EAAA7B,EAAA8B,cAAA,SAAId,KAAKzB,MAAMG,eAAe,IAC9BmC,EAAA7B,EAAA8B,cAAA,SAAId,KAAKzB,MAAMG,eAAe,IAC9BmC,EAAA7B,EAAA8B,cAAA,SAAId,KAAKzB,MAAMG,eAAe,IAC9BmC,EAAA7B,EAAA8B,cAAA,SAAId,KAAKzB,MAAMG,eAAe,YAhDpB2C,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAA7B,EAAA8B,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.1505a678.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: ''\n  };\n  componentDidMount () {\n    this.callApi()\n      .then(res => this.setState({ response: res.status }))\n      .catch(err => console.log(err));\n  }\n  async callApi () {\n    const response = await fetch('/livecheck');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  }\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/v1/books?q=' + this.state.post, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const body = await response.json();\n    this.setState({ responseToPost: body.relatedBooks });\n  };\n\n  render () {\n    return (\n      <div className='App'>\n        <p>Status of Omnibus server on port 5000 is {this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type='text'\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type='submit'>Submit</button>\n        </form>\n        <p>{this.state.responseToPost[0]}</p>\n        <p>{this.state.responseToPost[1]}</p>\n        <p>{this.state.responseToPost[2]}</p>\n        <p>{this.state.responseToPost[3]}</p>\n        <p>{this.state.responseToPost[4]}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}